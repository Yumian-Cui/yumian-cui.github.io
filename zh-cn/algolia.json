[{"categories":["projects"],"content":"改编自数据科学爱好者 Nagesh 关于用 Python 编写神经网络的教程","date":"2022-01-18","objectID":"/zh-cn/ann_part1/","tags":["Python","ANN","神经网络"],"title":"从头开始写一个人工神经网络第一部分：感知器","uri":"/zh-cn/ann_part1/"},{"categories":["projects"],"content":"请查看代码！ 请查看 Github Gist =\u003e 要像我一样运行Colab，请访问这里🙂。 特别感谢Nagesh 的教程 非常简单易懂地解释了神经网络，点击查看教程系列的第一部分。 ","date":"2022-01-18","objectID":"/zh-cn/ann_part1/:1:0","tags":["Python","ANN","神经网络"],"title":"从头开始写一个人工神经网络第一部分：感知器","uri":"/zh-cn/ann_part1/"},{"categories":["projects"],"content":"关于梯度下降的解释 我很喜欢 Nagesh 关于梯度下降的解释，这确实阐明了这个概念。我很高兴在此重新复述，作为一次小小复习。 回想公式: $$ w=w-\\alpha（\\frac{\\partial f}{\\partial w}）$$ $\\frac{\\partial F}{\\partial w}$ 是损失 f 相对于参数 w 的梯度，简单地说，它转化为损失随参数 w 的变化而变化的速率，在 2-D 下称之为斜率。如果损失随着参数 w 的增加而增加，$\\frac{\\partial F}{\\partial w}$ 将是一个正值，然后将其从 W 中减去相应值 $\\alpha (\\frac{\\partial F}{\\partial w})$，以沿梯度的相反方向前进。如果损失随着参数 w 的增加而减少，也同样适用:这意味着 $\\frac{\\partial F}{\\partial w}$ 是一个负值，我们实际上（减去一个负值）加了 $\\alpha (\\frac{\\partial F}{\\partial w})$ 的值到 w。，我们的目标是将 W 推向让 F，我们感兴趣最小化的损失函数，最快下降的方向。 ","date":"2022-01-18","objectID":"/zh-cn/ann_part1/:2:0","tags":["Python","ANN","神经网络"],"title":"从头开始写一个人工神经网络第一部分：感知器","uri":"/zh-cn/ann_part1/"},{"categories":["projects"],"content":"2020年夏季EconEx实习, 通过Python编程的独立项目","date":"2020-08-09","objectID":"/zh-cn/covid19_analysis/","tags":["Python","数据分析"],"title":"Covid-19下的纽约：消费者和零售趋势分析","uri":"/zh-cn/covid19_analysis/"},{"categories":["projects"],"content":"1. 我做了什么 在 2020 年的夏天，我有幸被选入了由 ECON 部门主办的 ECONEX Externship 项目。在威斯康辛大学校友和数据科学家 Micah Lanier 的指导下，我完成了一个独立项目，分析新冠疫情下纽约市的消费和零售趋势。同时，我在 Python 中自学了许多有用的数据分析技术，比如如何使用 Numpy、Pandas、Matplotlib…插值来填充丢失的数据和网络爬虫。 ","date":"2020-08-09","objectID":"/zh-cn/covid19_analysis/:1:0","tags":["Python","数据分析"],"title":"Covid-19下的纽约：消费者和零售趋势分析","uri":"/zh-cn/covid19_analysis/"},{"categories":["projects"],"content":"2. 最终结果 对于最终的可交付成果，这里是 whitepaper，我还做了一个视频演示: 这是完整的代码:（我在这里附上了它，但它们也可以在 github repo 上找到） Main.py: import pandas as pd import numpy as np from datetime import datetime import matplotlib.pyplot as plt %matplotlib inline df = pd.read_csv(\"us-counties.csv\",parse_dates=True,index_col=0) pd.options.display.max_rows = 10 df = df['20200304':'20200611'] df.reset_index(inplace=True) df t10 = df.groupby('state').sum().sort_values('cases', ascending=False).head(10) t10 = t10.drop(columns='fips') print (t10.index) t10_list = ['New York', 'New Jersey', 'Illinois', 'California', 'Massachusetts', 'Pennsylvania', 'Michigan', 'Texas', 'Florida', 'Louisiana'] t10 t_c = t10['cases'].to_list() t_d = t10['deaths'].to_list() x = np.arange(len(t10.index)) # the label locations width = 0.35 # the width of the bars fig, ax = plt.subplots(figsize=(12,5)) rects1 = ax.bar(x - width/2, t_c, width, label='cases') rects2 = ax.bar(x + width/2, t_d, width, label='deaths') # Add some text for labels, title and custom x-axis tick labels, etc. ax.set_ylabel('number') ax.set_title('Cases and deaths comparison across top 10 states') ax.set_xticks(x) ax.set_xticklabels(t10.index) #ax.set_yticks(y) #ax.set_yticklabels(y) ax.legend() fig.tight_layout() plt.show() # now I have obtained the top 10 states with cases confirmed. Next I want to plot the contrast between # cases and deaths over time for each state. cov19_counties_bystate_cases = pd.Series(df.groupby(['state','date']).cases.sum()) cov19_counties_bystate_deaths = pd.Series(df.groupby(['state','date']).deaths.sum()) cov19_counties_bystate = pd.DataFrame(cov19_counties_bystate_cases) cov19_counties_bystate['deaths'] = cov19_counties_bystate_deaths cov19_counties_bystate_deaths = pd.Series(cov19_counties.groupby(['state','date']).deaths.sum()) cov19_counties_bystate = pd.DataFrame(cov19_counties_bystate_cases) cov19_counties_bystate['deaths'] = cov19_counties_bystate_deaths cov19_counties_bystate from matplotlib.dates import DateFormatter import matplotlib.dates as mdates cov19_counties.date = pd.to_datetime(cov19_counties.date) pp.figure(figsize=(12,12)) for i, state in enumerate(t10.index): pp.subplot(5,2,i+1) #5 rows, 2 columns pp.plot(cov19_counties_bystate.loc[state].cases,label='cases') pp.plot(cov19_counties_bystate.loc[state].deaths,label='deaths') pp.legend() pp.title(state) #pp.xticks(arange(4), calendar.month_name[3:6+1], rotation=45) pp.tight_layout() # drop rows df = cov19_counties_bystate ax = cov19_counties_bystate.loc['New York'].cases.plot.line(figsize=(12,5)) ax = cov19_counties_bystate.loc['New Jersey'].cases.plot.line(figsize=(12,5)) ax = cov19_counties_bystate.loc['Illinois'].cases.plot.line(figsize=(12,5)) #ax = cov19_counties_bystate.loc['California'].cases.plot.line(figsize=(12,5))''' for state in t10.index[:4+1]: ax = cov19_counties_bystate.loc[state].cases.plot.line(figsize=(12,5)) ax.legend(t10.index[:4+1]) pp.title('states cases') for state in t10.index[:4+1]: ax = cov19_counties_bystate.loc[state].deaths.plot.line(figsize=(12,5)) ax.legend(t10.index[:4+1]) pp.title('states deaths') df[df.state == 'New York'] dfc = df[df.state == 'New York'].pivot_table(index = df[df.state == 'New York'].date, values='cases',aggfunc='sum') dfd = df[df.state == 'New York'].pivot_table(index = df[df.state == 'New York'].date, values='deaths',aggfunc='sum') ax = dfc.plot.line(figsize=(12,5),grid=True,rot=True) dfd.plot.line(figsize=(12,5),grid=True,rot=True,ax=ax) ax.set_xlabel(\"New York\") ax.set_ylabel(\"number\") def plotstate(state_name): dfc = df[df.state == state_name].pivot_table(index = df[df.state == state_name].date, values='cases',aggfunc='sum') dfd = df[df.state == state_name].pivot_table(index = df[df.state == state_name].date, values='deaths',aggfunc='sum') ax = dfc.plot.line(figsize=(12,5),grid=True,rot=True) dfd.plot.line(figsize=(12,5),grid=True,rot=True,ax=ax) ax.set_xlabel(state_name) ax.set_ylabel(\"number\") plotstate('New York') for i, state in enumerate(t10.index): plotstate(state) # the","date":"2020-08-09","objectID":"/zh-cn/covid19_analysis/:2:0","tags":["Python","数据分析"],"title":"Covid-19下的纽约：消费者和零售趋势分析","uri":"/zh-cn/covid19_analysis/"},{"categories":["projects"],"content":"我在 UW-Madison Data Science Club 主办的 Data Challenge 中的项目概述","date":"2020-11-05","objectID":"/zh-cn/data_challenge_2020/","tags":["机器学习","统计","数据分析","Python"],"title":"心力衰竭死亡预测项目-Data Challenge 2020","uri":"/zh-cn/data_challenge_2020/"},{"categories":["projects"],"content":"1.我做了什么 在 2020 年初秋，我与威斯康辛大学麦迪逊分校的Isye专业学生Shaonan Wang合作，参加了由数据科学俱乐部主办的数据挑战赛。任务是对给出的数据集进行预处理，并开发出可能的最佳预测 Statiscal/ML 模型（“最佳”表示最高准确度） 该数据集来自 Kaggle.com，它是基于近 300 名患者（糖尿病、高血压等）的 12 种健康特征，预测心力衰竭导致的死亡。采用 Logistic 回归和随机森林相结合的方法，最终得到了 87% 的随机森林.在模型评价中，我们使用了混淆矩阵和 ROC 曲线。最后，我们做了一个 analysis report，并向教授和其他团队展示了我们的成果。 ","date":"2020-11-05","objectID":"/zh-cn/data_challenge_2020/:1:0","tags":["机器学习","统计","数据分析","Python"],"title":"心力衰竭死亡预测项目-Data Challenge 2020","uri":"/zh-cn/data_challenge_2020/"},{"categories":["projects"],"content":"2.最终结果 deliverables 👉 colab代码 👉 analysis report 幻灯片 ","date":"2020-11-05","objectID":"/zh-cn/data_challenge_2020/:2:0","tags":["机器学习","统计","数据分析","Python"],"title":"心力衰竭死亡预测项目-Data Challenge 2020","uri":"/zh-cn/data_challenge_2020/"},{"categories":["博客"],"content":"使用 Google Colab 和 gspread（用于 Google 表格的 Python API）来更新我的番茄追踪器","date":"2022-01-14","objectID":"/zh-cn/pomodoro/","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"在上个学期的时间管理中，我偶然发现了 Francesco Cirillo 开发的 番茄技术。虽然这是我很久以前就听说过的事情，但我还是决定试一试。这一次，我用谷歌工作表作为我的番茄追踪器。 我已经将跟踪器分为 3 个工作表，它们是（1）今天的待办事项，（2）每日日志，和（3）待办事项（见下图）。我会用待办事项来记录我的总体目标，不管是短期目标还是长期目标。然后，在每天开始的时候，我会选择一些我想要关注的任务，并将它们放在今天的待办事项中，在每天结束的时候，我会手动输入今天完成的任务，并将它们组织到每日日志中，这是一张详细的表格，记录了我每天完成任务的内容。 Today's To-Do\u003cimg src=\"Daily-To-Do.png\" width=\"250\"/\u003e \" Today's To-Do Daily Log\u003cimg src=\"Daily-log.png\" width=\"250\"/\u003e \" Daily Log To-Dos\u003cimg src=\"To-Dos.png\" width=\"250\"/\u003e \" To-Dos 在将今天的待办事项中的信息手动转移到日常日志中一段时间后，我厌倦了繁琐的“复制和粘贴”过程。考虑到这可能是一个学习一些新技能的好机会，我使用相对简单的 gspread API 查找了如何阅读和编写谷歌工作表，结果只需运行一个简短的代码就可以节省很多时间。 ","date":"2022-01-14","objectID":"/zh-cn/pomodoro/:0:0","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"演示文件（跟上！） 如果你想获得亲身体验，你可以使用演示文件与我一起编码。欢迎你进行调整和改进，以使自己适合自己。 填充 log.ipynb:python 代码 番茄技术 Google Sheets ","date":"2022-01-14","objectID":"/zh-cn/pomodoro/:1:0","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"1. 导入 import pandas as pd from google.colab import auth import gspread from oauth2client.client import GoogleCredentials from datetime import date, datetime import pytz import os import json ","date":"2022-01-14","objectID":"/zh-cn/pomodoro/:2:0","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"2. 认证和授权 auth.authenticate_user() gc = gspread.authorize(GoogleCredentials.get_application_default()) 第一步是使 Google Sheets API 能够访问你的电子表格。\" 身份验证和授权机制分别用于验证身份和对资源的访问。“你可以了解有关身份验证和授权 here 的更多信息。 但实际上，一旦你运行了这两行代码，一个 URL 就会弹出，并在浏览器中打开一个新的选项卡，该选项卡要求你授予访问权限。之后，复制 URL 并将其粘贴到“验证”框中。 ","date":"2022-01-14","objectID":"/zh-cn/pomodoro/:3:0","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"3. 找到你的表单 url = \"https://docs.google.com/spreadsheets/d/1oogWtA5vSlcZTYzYL1CDrv4FIytao2MBBq6UmCKHLK4/edit#gid=0\" wb = gc.open_by_url(url) todosheet = wb.worksheet(\"Today's To-Do\") logsheet = wb.worksheet(\"Daily Log\") 接下来，我们准备好打开我们的电子表格。请记住上面的 gc 变量，它存储了一个你实际上不需要知道的 Client_Class 实例。gc.open_by_url 通过 URL 打开电子表格并返回电子表格实例 wb。通过更改 wb.worksheet(???) 的名称参数，我们可以检索相应的工作表。 ","date":"2022-01-14","objectID":"/zh-cn/pomodoro/:4:0","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"4. 操作检索到的工作表数据 在我的例子中，因为我想将单元格数据读入列表（表示行）并将其写到新的工作表中，所以我以我认为合适的方式对其进行了操作。返回的 newList 将用于填充“每日日志”工作表。 data = todosheet.get_all_values() df_todo = pd.DataFrame(data) df_todo.columns = df_todo.iloc[0] df_todo = df_todo.drop(0) df_todo = df_todo.reset_index(drop=True) header = df_todo.columns.tolist() rowsList = df_todo.to_numpy().tolist() ''' return a list of lists to populate the log sheet will only add tasks that have already been done ''' def createPopulateData(rowsList): newList = [] for row in rowsList: rowList = [] task = row[header.index('task')] status = row[header.index('status')] if task == \"\" or status == \"\": break start_time = row[header.index('start time')] stepType = row[header.index('step/type')] pomos = row[header.index('pomodoro(s)')] pomoNum, intDistract, extDistract = 0, 0, 0 for sign in pomos: if sign == \"x\": pomoNum += 1 elif sign == \"-\": extDistract += 1 elif sign == \"'\": intDistract += 1 else: continue if pomoNum == 0: continue tz = pytz.timezone(\"US/Central\") todayDate = datetime.now(tz).strftime(\"%m/%d/%y\") # assumes the author runs the script before local 11:59 pm notes = row[header.index('notes')] rowList.extend([todayDate, start_time, stepType, task, pomoNum, intDistract, extDistract, notes]) newList.append(rowList) return newList newList = createPopulateData(rowsList) ","date":"2022-01-14","objectID":"/zh-cn/pomodoro/:5:0","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"5. 简化更新流程 如果我希望重写，因为我已经对我的“今天的工作”表做了一些其他的修改，该怎么办？因为默认情况下 sheet.append_rows（） 函数追加到表的最后一行之后，而我不希望这样，所以在最初运行代码时，我创建了一个 marks.json 文件，该文件记录了范围的起始索引，以及这是否是一个更新操作。如果这是一个更新操作（除了第一次运行代码，其余都被认为是更新），我将切换到使用 sheet.update（），因为它将更新并反映我对 Sheet 所做的新更改。 path = \"/content/marks.json\" if not os.path.exists(path): start = len(logsheet.col_values(1)) + 1 marks = {} marks[\"start\"] = start marks[\"update\"] = False with open(path, \"w\") as f: json.dump(marks, f) else: with open(path) as f1: marks = json.load(f1) marks[\"update\"] = True with open(path, \"w\") as f2: json.dump(marks, f2) with open(path) as f: marks = json.load(f) start, update = marks[\"start\"], marks[\"update\"] ''' do not delete Today's To-Do sheet until satisfied with Daily log editing because starting index of rows range to append is fixed ''' append = len(newList) - 1 end = marks[\"start\"] + append if not update: print(f\"append {len(newList)} rows to Daily Log\") res = logsheet.append_rows(newList, table_range=f\"A{start}:H{end}\") else: print(f\"update {len(newList)} rows to Daily Log\") res = logsheet.update(f\"A{start}:H{end}\", newList) if len(newList) == 0: print(\"no finished task to append or update yet :)\") res 最后，res 对象包括一个自动响应，该响应告诉我们已经添加或更新了什么，以确认我们是否做了正确的事情。 ","date":"2022-01-14","objectID":"/zh-cn/pomodoro/:6:0","tags":["“番茄钟”","“Python”","“gspread”","“Colab”","“谷歌表格”"],"title":"用 Google Sheets API 在两秒钟内填充我的番茄追踪器","uri":"/zh-cn/pomodoro/"},{"categories":["博客"],"content":"花一些时间来更新我对“p-value”的理解, 并在此处做个笔记","date":"2020-09-01","objectID":"/zh-cn/stats_pvalue/","tags":["p值","统计","假设检验"],"title":"对假设检验中p值的反思","uri":"/zh-cn/stats_pvalue/"},{"categories":["博客"],"content":"我觉得这个主题非常重要，值得深入探讨，因为我这学期的 4 门课程中有 3 门已经涵盖了这个概念。然而，在我的 AP 课程和大学入门统计课程中，我很早就学会了 P 值和假设检验，这始终有点模糊。因此，为学习巩固和将来的参考复习将是很好的。 ","date":"2020-09-01","objectID":"/zh-cn/stats_pvalue/:0:0","tags":["p值","统计","假设检验"],"title":"对假设检验中p值的反思","uri":"/zh-cn/stats_pvalue/"},{"categories":["博客"],"content":"1. 拒绝检验假设Ho实际上意味着什么？ 拒绝检验假设 $H_{0}$ 并不意味着它是真的，它只是意味着我们无法证明它是假的。检验假设 $H_{0}$ 和 备择假设 $H_{1}$ 不是对立面。这不是非黑即白。假设检验假设 $H_{0}$ 为真，则发生了一个低概率事件.这种情况似乎很少发生，但如果确实发生了，那么有理由怀疑检验假设 $H_{0}$ 的有效性。 ","date":"2020-09-01","objectID":"/zh-cn/stats_pvalue/:1:0","tags":["p值","统计","假设检验"],"title":"对假设检验中p值的反思","uri":"/zh-cn/stats_pvalue/"},{"categories":["博客"],"content":"2. 假设检验 根据伍尔德里奇的教科书:有两种方法。 经典的:比较临界值和测试统计量，如果测试统计量 \u003e 临界值，然后拒绝，因为我们得到了一个足够大的值相比空。 note 随着 $\\alpha$ 显著性水平的降低，临界值增加，这意味着更难拒绝检验假设 $H_{0}$ ，并且需要更大的测试统计量来拒绝。例如，如果我可以拒绝 5% 显著性水平的空，那么我肯定可以拒绝 10% 的空。 P 值:计算 P 值并将其与 Sigficance 级别进行比较，如果 P 值 \u003c 显著性级别，则拒绝检验假设 $H_{0}$ ，反之亦然。 ","date":"2020-09-01","objectID":"/zh-cn/stats_pvalue/:2:0","tags":["p值","统计","假设检验"],"title":"对假设检验中p值的反思","uri":"/zh-cn/stats_pvalue/"},{"categories":["博客"],"content":"3. 额外的想法 给定 t 统计量的观测值，p 值是否定零假设的最小显著性水平（alpha）。–引自伍尔德里奇 用我自己的理解来说，如果 p 值是 0.03，这意味着当检验假设 $H_{0}$ 为真时，我们将观察到测试统计为极端 3% 的时间。较小的 p 表示反对 $H_{0}$ 的证据较强。要将它与 $\\alpha$ 进行比较，符号度水平是为了确保如果我们在 3% 的时间内拒绝 $H_{0}$ ，它应该在误差容限内（显著性水平），例如，如果 $\\alpha$ 是 0.05，我们愿意接受错误地拒绝 5% 的零时间，当它实际上是真的。为什么说 P 值是最小的显著性水平？如果我们计算 p 为 0.03，并且我们可以在 3% 的显著性水平上拒绝 $H_{0}$ ，那么如果问题设置为 5%，我们当然可以拒绝它。 ","date":"2020-09-01","objectID":"/zh-cn/stats_pvalue/:3:0","tags":["p值","统计","假设检验"],"title":"对假设检验中p值的反思","uri":"/zh-cn/stats_pvalue/"},{"categories":["博客"],"content":"一个博客, 分享我自己构建 Hugo 网站的一些经验","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"1. 前提 安装 git 安装 hugo ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:1:0","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"2. 开始 我建议查看官方文档，了解基本的安装和配置。如果到那时你还不能解决问题，那就看看那些可能会有帮助的博客文章。 ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:2:0","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"官方文档 https://hugoloveit.com/（网站小样） https://gohugo.io/getting-started/quick-start/ https://hugoloveit.com/（这是 Hugo 中的 loveit 主题，但是格式和debug应该能应用到其他模板） YouTube 一步一步的教程 ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:2:1","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"博客 有没有地方我们可以在 blogdown 中放置非博客文件（pdf 文件）？ 如何用Hugo一起创建多语言网站 ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:2:2","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"杂项 font_awesome。Docset（图标） Common Issues 如果你的页面在开发模式下崩溃，请耐心等待，也许可以用 Ctrl-C 和 hugo server -D 在终端中重新加载服务器。 要注意语法、格式，特别是在使用多语言设置时。 如果你不确定组织结构，请在复制每个 Hugo Repo 文件夹后，始终首先引用 themes/xxx/examplesite 文件夹。 当你想要在主页中为内容预览添加图像时，请执行以下操作: resources: - name: \"featured-image\" src: \"featured-image.png\" 并将你的 MD 文件命名为 index.md。如果你想告诉 Hugo 在预览中只在分隔符之前总结内容，请不要忘记添加 \u003c!--more--\u003e 分隔符。 ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:2:3","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"3. 发布你的网站 出版这一页对我来说有点麻烦。在这次体验之后，我真诚的建议是找一个教程，并严格按照步骤进行。即使你不喜欢这个主题或教程风格，但首先建立你的理解并在此基础上进行升级/优化总是比较容易的。 我使用 Github 来托管我的网站，下面是我引用的文档/博客列表: https://hongtaoh.com/en/2021/04/05/hugo-deploy-github-actions/ https://gohugo.io/hosting-and-deployment/hosting-on-github/ https://levelup.gitconnected.com/build-a-personal-website-with-github-pages-and-hugo-6c68592204c7 https://www.pluralsight.com/guides/how-to-host-your-static-webpages-on-github-pages ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:3:0","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"4. 其他细节 ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:4:0","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"评论 为了设置 Utterances 评论部分，我更新了 config.toml 并将 Utterances 应用程序安装到 repo。还有其他 alternatives 类似的 disqus 和 valine。 ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:4:1","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":["博客"],"content":"GDOCS 简码 感谢 Ashish Tiwari 的 Shortcodes post 和 Wowchemy-Hugo-Modules ，我能够加入 GDOCS 的 Shortcodes 功能。特别是，要注意你的简码。 {{\u003cgdocs src=\"???\"\u003e}} ，srcURL 应该是发布到 Web 的 URL（在你的 Google 幻灯片中，转到文件，然后发布到 Web，选择链接或嵌入并复制 src=\"？？？”），而不是共享的 URL。我纠正了这一点，因为我发现只有我的笔记本电脑网络可以显示 GDOCS（而且显示内容不是很令人满意），而 iPad 和 iPhone 不能。特别感谢 Cecina Babich Morrow 的帖子。 ","date":"2021-11-10","objectID":"/zh-cn/hugo_tutorial/:4:2","tags":["安装","设置","网站"],"title":"Hugo网站搭建经验帖","uri":"/zh-cn/hugo_tutorial/"},{"categories":null,"content":" 请点击 这里 查看我的最新简历。如果您对我的网站或其内容有任何想法或任何一般性的想法，请随时与我联系！ May 2020 at Wisconsin State Capitolc.r. Yizhou Lu \" May 2020 at Wisconsin State Capitol ","date":"2021-11-21","objectID":"/zh-cn/about/:0:0","tags":null,"title":"关于我","uri":"/zh-cn/about/"},{"categories":null,"content":"教育 我叫崔雨眠，来自中国。我的代词是她/她/她的。我目前是威斯康辛大学麦迪逊分校的一名大四学生，主修数据科学和经济学（数学）并辅修计算机科学。在上大学之前，我在中国完成了所有的教育。 ","date":"2021-11-21","objectID":"/zh-cn/about/:0:1","tags":null,"title":"关于我","uri":"/zh-cn/about/"},{"categories":null,"content":"兴趣  阅读  辅导  编码  吃  听音乐  和我的猫一起玩 研究兴趣  机器学习  人机交互（HCI）  自然语言处理（NLP） ","date":"2021-11-21","objectID":"/zh-cn/about/:0:2","tags":null,"title":"关于我","uri":"/zh-cn/about/"}]